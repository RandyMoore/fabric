// Code generated by protoc-gen-gogo.
// source: peer/signed_cc_dep_spec.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SignedChaincodeDeploymentSpec carries the CDS along with endorsements
type SignedChaincodeDeploymentSpec struct {
	// This is the bytes of the ChaincodeDeploymentSpec
	ChaincodeDeploymentSpec []byte `protobuf:"bytes,1,opt,name=chaincode_deployment_spec,json=chaincodeDeploymentSpec,proto3" json:"chaincode_deployment_spec,omitempty"`
	// This is the instantiation policy which is identical in structure
	// to endorsement policy.  This policy is checked by the VSCC at commit
	// time on the instantiation (all peers will get the same policy as it
	// will be part of the LSCC instantation record and will be part of the
	// hash as well)
	InstantiationPolicy []byte `protobuf:"bytes,2,opt,name=instantiation_policy,json=instantiationPolicy,proto3" json:"instantiation_policy,omitempty"`
	// The endorsements of the above deployment spec, the owner's signature over
	// chaincode_deployment_spec and Endorsement.endorser.
	OwnerEndorsements []*Endorsement `protobuf:"bytes,3,rep,name=owner_endorsements,json=ownerEndorsements" json:"owner_endorsements,omitempty"`
}

func (m *SignedChaincodeDeploymentSpec) Reset()         { *m = SignedChaincodeDeploymentSpec{} }
func (m *SignedChaincodeDeploymentSpec) String() string { return proto.CompactTextString(m) }
func (*SignedChaincodeDeploymentSpec) ProtoMessage()    {}
func (*SignedChaincodeDeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorSignedCcDepSpec, []int{0}
}

func (m *SignedChaincodeDeploymentSpec) GetChaincodeDeploymentSpec() []byte {
	if m != nil {
		return m.ChaincodeDeploymentSpec
	}
	return nil
}

func (m *SignedChaincodeDeploymentSpec) GetInstantiationPolicy() []byte {
	if m != nil {
		return m.InstantiationPolicy
	}
	return nil
}

func (m *SignedChaincodeDeploymentSpec) GetOwnerEndorsements() []*Endorsement {
	if m != nil {
		return m.OwnerEndorsements
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedChaincodeDeploymentSpec)(nil), "protos.SignedChaincodeDeploymentSpec")
}
func (m *SignedChaincodeDeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedChaincodeDeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChaincodeDeploymentSpec) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSignedCcDepSpec(dAtA, i, uint64(len(m.ChaincodeDeploymentSpec)))
		i += copy(dAtA[i:], m.ChaincodeDeploymentSpec)
	}
	if len(m.InstantiationPolicy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSignedCcDepSpec(dAtA, i, uint64(len(m.InstantiationPolicy)))
		i += copy(dAtA[i:], m.InstantiationPolicy)
	}
	if len(m.OwnerEndorsements) > 0 {
		for _, msg := range m.OwnerEndorsements {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSignedCcDepSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64SignedCcDepSpec(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SignedCcDepSpec(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSignedCcDepSpec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignedChaincodeDeploymentSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChaincodeDeploymentSpec)
	if l > 0 {
		n += 1 + l + sovSignedCcDepSpec(uint64(l))
	}
	l = len(m.InstantiationPolicy)
	if l > 0 {
		n += 1 + l + sovSignedCcDepSpec(uint64(l))
	}
	if len(m.OwnerEndorsements) > 0 {
		for _, e := range m.OwnerEndorsements {
			l = e.Size()
			n += 1 + l + sovSignedCcDepSpec(uint64(l))
		}
	}
	return n
}

func sovSignedCcDepSpec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSignedCcDepSpec(x uint64) (n int) {
	return sovSignedCcDepSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedChaincodeDeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignedCcDepSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedChaincodeDeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedChaincodeDeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChaincodeDeploymentSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChaincodeDeploymentSpec = append(m.ChaincodeDeploymentSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.ChaincodeDeploymentSpec == nil {
				m.ChaincodeDeploymentSpec = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiationPolicy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstantiationPolicy = append(m.InstantiationPolicy[:0], dAtA[iNdEx:postIndex]...)
			if m.InstantiationPolicy == nil {
				m.InstantiationPolicy = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEndorsements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEndorsements = append(m.OwnerEndorsements, &Endorsement{})
			if err := m.OwnerEndorsements[len(m.OwnerEndorsements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignedCcDepSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignedCcDepSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignedCcDepSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSignedCcDepSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSignedCcDepSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSignedCcDepSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSignedCcDepSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignedCcDepSpec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("peer/signed_cc_dep_spec.proto", fileDescriptorSignedCcDepSpec) }

var fileDescriptorSignedCcDepSpec = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0x95, 0x18, 0x0c, 0x0b, 0x29, 0x12, 0x01, 0xd1, 0xa8, 0xea, 0x54, 0x96, 0x44,
	0xc0, 0xc6, 0x58, 0x60, 0x47, 0xed, 0xc6, 0x62, 0x25, 0xce, 0x91, 0x58, 0x4a, 0x7d, 0x27, 0x9f,
	0x11, 0xca, 0x9b, 0xf0, 0x48, 0x8c, 0x88, 0x27, 0x40, 0xe1, 0x45, 0x50, 0x1c, 0x2a, 0xca, 0xd0,
	0xc9, 0x92, 0xbf, 0xef, 0xfe, 0x3b, 0xfd, 0x72, 0x42, 0x00, 0x2e, 0x63, 0x53, 0x59, 0x28, 0x95,
	0xd6, 0xaa, 0x04, 0x52, 0x4c, 0xa0, 0x53, 0x72, 0xe8, 0x31, 0x3a, 0x08, 0x0f, 0x9f, 0x5f, 0x04,
	0x8d, 0x1c, 0x12, 0x72, 0xde, 0x28, 0x07, 0x4c, 0x68, 0x19, 0x06, 0x6b, 0xf6, 0x29, 0xe4, 0x64,
	0x15, 0x22, 0xee, 0xea, 0xdc, 0x58, 0x8d, 0x25, 0xdc, 0x03, 0x35, 0xd8, 0xae, 0xc1, 0xfa, 0x15,
	0x81, 0x8e, 0x6e, 0xe5, 0x99, 0xde, 0xa0, 0x7e, 0xc7, 0x2f, 0x0b, 0xab, 0x62, 0x31, 0x15, 0xf3,
	0xa3, 0xe5, 0xa9, 0xde, 0x31, 0x7b, 0x25, 0x4f, 0x8c, 0x65, 0x9f, 0x5b, 0x6f, 0x72, 0x6f, 0xd0,
	0x2a, 0xc2, 0xc6, 0xe8, 0x36, 0xde, 0x0f, 0x63, 0xe3, 0x7f, 0xec, 0x31, 0xa0, 0x68, 0x21, 0x23,
	0x7c, 0xb5, 0xe0, 0x14, 0xd8, 0x12, 0x1d, 0x43, 0x9f, 0xc5, 0xf1, 0x68, 0x3a, 0x9a, 0x1f, 0x5e,
	0x8f, 0x87, 0xa3, 0x39, 0x7d, 0xf8, 0x63, 0xcb, 0xe3, 0xa0, 0x6f, 0xfd, 0xf0, 0x42, 0xbd, 0x77,
	0x89, 0xf8, 0xe8, 0x12, 0xf1, 0xd5, 0x25, 0xe2, 0xed, 0x3b, 0xd9, 0x93, 0x33, 0x74, 0x55, 0x5a,
	0xb7, 0x04, 0xae, 0x81, 0xb2, 0x02, 0x97, 0x3e, 0xe7, 0x85, 0x33, 0x7a, 0x93, 0xd7, 0x57, 0xf4,
	0x74, 0x59, 0x19, 0x5f, 0xbf, 0x14, 0xa9, 0xc6, 0x75, 0xb6, 0xa5, 0x66, 0x83, 0x9a, 0x0d, 0x6a,
	0xd6, 0xab, 0xc5, 0xd0, 0xed, 0xcd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x11, 0x4f, 0x96,
	0x83, 0x01, 0x00, 0x00,
}
