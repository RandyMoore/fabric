// Code generated by protoc-gen-gogo.
// source: dah.proto
// DO NOT EDIT!

/*
	Package util is a generated protocol buffer package.

	It is generated from these files:
		dah.proto

	It has these top-level messages:
		TX
*/
package util

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TX struct {
	Version  uint32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	LockTime uint32      `protobuf:"varint,2,opt,name=lockTime,proto3" json:"lockTime,omitempty"`
	Txin     []*TX_TXIN  `protobuf:"bytes,3,rep,name=txin" json:"txin,omitempty"`
	Txout    []*TX_TXOUT `protobuf:"bytes,4,rep,name=txout" json:"txout,omitempty"`
	Blocks   [][]byte    `protobuf:"bytes,5,rep,name=blocks" json:"blocks,omitempty"`
	Fee      uint64      `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *TX) Reset()                    { *m = TX{} }
func (m *TX) String() string            { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()               {}
func (*TX) Descriptor() ([]byte, []int) { return fileDescriptorDah, []int{0} }

func (m *TX) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TX) GetLockTime() uint32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *TX) GetTxin() []*TX_TXIN {
	if m != nil {
		return m.Txin
	}
	return nil
}

func (m *TX) GetTxout() []*TX_TXOUT {
	if m != nil {
		return m.Txout
	}
	return nil
}

func (m *TX) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *TX) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type TX_TXIN struct {
	Ix         uint32 `protobuf:"varint,1,opt,name=ix,proto3" json:"ix,omitempty"`
	SourceHash []byte `protobuf:"bytes,2,opt,name=sourceHash,proto3" json:"sourceHash,omitempty"`
	Script     []byte `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	Sequence   uint32 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *TX_TXIN) Reset()                    { *m = TX_TXIN{} }
func (m *TX_TXIN) String() string            { return proto.CompactTextString(m) }
func (*TX_TXIN) ProtoMessage()               {}
func (*TX_TXIN) Descriptor() ([]byte, []int) { return fileDescriptorDah, []int{0, 0} }

func (m *TX_TXIN) GetIx() uint32 {
	if m != nil {
		return m.Ix
	}
	return 0
}

func (m *TX_TXIN) GetSourceHash() []byte {
	if m != nil {
		return m.SourceHash
	}
	return nil
}

func (m *TX_TXIN) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *TX_TXIN) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type TX_TXOUT struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Script   []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Color    []byte `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Quantity uint64 `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (m *TX_TXOUT) Reset()                    { *m = TX_TXOUT{} }
func (m *TX_TXOUT) String() string            { return proto.CompactTextString(m) }
func (*TX_TXOUT) ProtoMessage()               {}
func (*TX_TXOUT) Descriptor() ([]byte, []int) { return fileDescriptorDah, []int{0, 1} }

func (m *TX_TXOUT) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TX_TXOUT) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *TX_TXOUT) GetColor() []byte {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *TX_TXOUT) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func init() {
	proto.RegisterType((*TX)(nil), "util.TX")
	proto.RegisterType((*TX_TXIN)(nil), "util.TX.TXIN")
	proto.RegisterType((*TX_TXOUT)(nil), "util.TX.TXOUT")
}
func (m *TX) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TX) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.Version))
	}
	if m.LockTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.LockTime))
	}
	if len(m.Txin) > 0 {
		for _, msg := range m.Txin {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDah(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Txout) > 0 {
		for _, msg := range m.Txout {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDah(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDah(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Fee != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.Fee))
	}
	return i, nil
}

func (m *TX_TXIN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TX_TXIN) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ix != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.Ix))
	}
	if len(m.SourceHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDah(dAtA, i, uint64(len(m.SourceHash)))
		i += copy(dAtA[i:], m.SourceHash)
	}
	if len(m.Script) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDah(dAtA, i, uint64(len(m.Script)))
		i += copy(dAtA[i:], m.Script)
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.Sequence))
	}
	return i, nil
}

func (m *TX_TXOUT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TX_TXOUT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.Value))
	}
	if len(m.Script) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDah(dAtA, i, uint64(len(m.Script)))
		i += copy(dAtA[i:], m.Script)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDah(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDah(dAtA, i, uint64(m.Quantity))
	}
	return i, nil
}

func encodeFixed64Dah(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dah(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDah(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TX) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovDah(uint64(m.Version))
	}
	if m.LockTime != 0 {
		n += 1 + sovDah(uint64(m.LockTime))
	}
	if len(m.Txin) > 0 {
		for _, e := range m.Txin {
			l = e.Size()
			n += 1 + l + sovDah(uint64(l))
		}
	}
	if len(m.Txout) > 0 {
		for _, e := range m.Txout {
			l = e.Size()
			n += 1 + l + sovDah(uint64(l))
		}
	}
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovDah(uint64(l))
		}
	}
	if m.Fee != 0 {
		n += 1 + sovDah(uint64(m.Fee))
	}
	return n
}

func (m *TX_TXIN) Size() (n int) {
	var l int
	_ = l
	if m.Ix != 0 {
		n += 1 + sovDah(uint64(m.Ix))
	}
	l = len(m.SourceHash)
	if l > 0 {
		n += 1 + l + sovDah(uint64(l))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovDah(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovDah(uint64(m.Sequence))
	}
	return n
}

func (m *TX_TXOUT) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovDah(uint64(m.Value))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovDah(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovDah(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovDah(uint64(m.Quantity))
	}
	return n
}

func sovDah(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDah(x uint64) (n int) {
	return sovDah(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDah
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txin = append(m.Txin, &TX_TXIN{})
			if err := m.Txin[len(m.Txin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txout = append(m.Txout, &TX_TXOUT{})
			if err := m.Txout[len(m.Txout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDah(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDah
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TX_TXIN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDah
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TXIN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TXIN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ix", wireType)
			}
			m.Ix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ix |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceHash = append(m.SourceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SourceHash == nil {
				m.SourceHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = append(m.Script[:0], dAtA[iNdEx:postIndex]...)
			if m.Script == nil {
				m.Script = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDah(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDah
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TX_TXOUT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDah
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TXOUT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TXOUT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = append(m.Script[:0], dAtA[iNdEx:postIndex]...)
			if m.Script == nil {
				m.Script = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDah
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = append(m.Color[:0], dAtA[iNdEx:postIndex]...)
			if m.Color == nil {
				m.Color = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDah
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDah(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDah
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDah(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDah
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDah
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDah
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDah
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDah
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDah(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDah = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDah   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dah.proto", fileDescriptorDah) }

var fileDescriptorDah = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x6a, 0xe3, 0x30,
	0x1c, 0xc6, 0xcf, 0xb6, 0x9c, 0xbb, 0xd3, 0x25, 0xe1, 0x10, 0xe1, 0x10, 0x19, 0x8c, 0xef, 0xb8,
	0xc1, 0x93, 0x0d, 0xed, 0xdc, 0xa5, 0x53, 0xbb, 0x34, 0x20, 0x5c, 0x08, 0xdd, 0x6c, 0x45, 0xb1,
	0xd5, 0x3a, 0x96, 0x23, 0x4b, 0xc1, 0x59, 0xfb, 0x14, 0x7d, 0xa4, 0x8e, 0x7d, 0x84, 0x92, 0xbe,
	0x48, 0x91, 0xec, 0x84, 0x74, 0x11, 0xfa, 0xe9, 0xfb, 0xf3, 0x7d, 0xdf, 0x1f, 0xc1, 0x9f, 0xab,
	0xac, 0x8c, 0x1b, 0x29, 0x94, 0x40, 0x40, 0x2b, 0x5e, 0xfd, 0x7b, 0xf6, 0xa0, 0x9b, 0x2e, 0x11,
	0x86, 0xdf, 0x77, 0x4c, 0xb6, 0x5c, 0xd4, 0xd8, 0x09, 0x9d, 0x68, 0x42, 0x8e, 0x88, 0xe6, 0xf0,
	0x47, 0x25, 0xe8, 0x53, 0xca, 0x37, 0x0c, 0xbb, 0x56, 0x3a, 0x31, 0xfa, 0x0b, 0x81, 0xea, 0x78,
	0x8d, 0xbd, 0xd0, 0x8b, 0x7e, 0x5d, 0x4c, 0x62, 0xe3, 0x18, 0xa7, 0xcb, 0x38, 0x5d, 0xde, 0xde,
	0x11, 0x2b, 0xa1, 0xff, 0xd0, 0x57, 0x9d, 0xd0, 0x0a, 0x03, 0x3b, 0x33, 0x3d, 0x9b, 0x59, 0xdc,
	0xa7, 0xa4, 0x17, 0xd1, 0x1f, 0x38, 0xca, 0x8d, 0x6b, 0x8b, 0xfd, 0xd0, 0x8b, 0xc6, 0x64, 0x20,
	0xf4, 0x1b, 0x7a, 0x6b, 0xc6, 0xf0, 0x28, 0x74, 0x22, 0x40, 0xcc, 0x75, 0xfe, 0x08, 0x81, 0x71,
	0x47, 0x53, 0xe8, 0xf2, 0x6e, 0xe8, 0xea, 0xf2, 0x0e, 0x05, 0x10, 0xb6, 0x42, 0x4b, 0xca, 0x6e,
	0xb2, 0xb6, 0xb4, 0x45, 0xc7, 0xe4, 0xec, 0xc5, 0x24, 0xb4, 0x54, 0xf2, 0x46, 0x61, 0xcf, 0x6a,
	0x03, 0x99, 0xf5, 0x5a, 0xb6, 0xd5, 0xac, 0xa6, 0x0c, 0x83, 0x7e, 0xbd, 0x23, 0xcf, 0x0b, 0xe8,
	0xdb, 0x96, 0x68, 0x06, 0xfd, 0x5d, 0x56, 0x69, 0x66, 0xf3, 0x00, 0xe9, 0xe1, 0xcc, 0xd2, 0xfd,
	0x62, 0x39, 0x83, 0x3e, 0x15, 0x95, 0x90, 0x43, 0x52, 0x0f, 0x26, 0x68, 0xab, 0xb3, 0x5a, 0x71,
	0xb5, 0xb7, 0x41, 0x80, 0x9c, 0xf8, 0x7a, 0xf1, 0x7a, 0x08, 0x9c, 0xb7, 0x43, 0xe0, 0xbc, 0x1f,
	0x02, 0xe7, 0xe5, 0x23, 0xf8, 0xf6, 0x70, 0x55, 0x70, 0x55, 0xea, 0x3c, 0xa6, 0x62, 0x93, 0x94,
	0xfb, 0x86, 0xc9, 0x8a, 0xad, 0x0a, 0x26, 0x93, 0x75, 0x96, 0x4b, 0x4e, 0x13, 0xd6, 0x65, 0x9b,
	0xa6, 0x62, 0x6d, 0x42, 0xcb, 0x8c, 0xd7, 0x54, 0xac, 0x58, 0x52, 0x88, 0x44, 0xab, 0xce, 0x1c,
	0xbc, 0xca, 0x47, 0xf6, 0x8b, 0x2f, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x79, 0xad, 0x3c, 0xe3,
	0xef, 0x01, 0x00, 0x00,
}
